# Generated by Django 3.2.21 on 2023-10-31 14:23

from copy import deepcopy
from typing import TypeAlias, TypedDict

from django.db import migrations

from glom import assign, delete, glom

# mapping from new, NL DS token to the source (old custom token)
MAPPING = {
    "utrecht.button.background-color": "of.button.bg",
    "utrecht.button.border-color": "of.button.color-border",
    "utrecht.button.color": "of.button.fg",
    "utrecht.button.font-family": "of.typography.sans-serif.font-family",
    "utrecht.button.hover.background-color": "of.button.hover.bg",
    "utrecht.button.hover.border-color": "of.button.hover.color-border",
    "utrecht.button.active.background-color": "of.button.active.bg",
    "utrecht.button.active.border-color": "of.button.active.color-border",
    "utrecht.button.active.color": "of.button.active.fg",
    "utrecht.button.focus.border-color": "of.button.focus.color-border",
    "utrecht.button.primary-action.background-color": "of.button.primary.bg",
    "utrecht.button.primary-action.border-color": "of.button.primary.color-border",
    "utrecht.button.primary-action.color": "of.button.primary.fg",
    "utrecht.button.primary-action.hover.background-color": "of.button.primary.hover.bg",
    "utrecht.button.primary-action.hover.border-color": "of.button.primary.hover.color-border",
    "utrecht.button.primary-action.active.background-color": "of.button.primary.active.bg",
    "utrecht.button.primary-action.active.border-color": "of.button.primary.active.color-border",
    "utrecht.button.primary-action.active.color": "of.button.primary.active.fg",
    "utrecht.button.primary-action.focus.border-color": "of.button.primary.focus.color-border",
    "utrecht.button.primary-action.danger.background-color": "of.button.danger.bg",
    "utrecht.button.primary-action.danger.border-color": "of.button.danger.color-border",
    "utrecht.button.primary-action.danger.color": "of.button.danger.fg",
    "utrecht.button.primary-action.danger.hover.background-color": "of.button.danger.hover.bg",
    "utrecht.button.primary-action.danger.hover.border-color": "of.button.danger.hover.color-border ",
    "utrecht.button.primary-action.danger.active.background-color": "of.button.danger.active.bg",
    "utrecht.button.primary-action.danger.active.border-color": "of.button.danger.active.color-border ",
    "utrecht.button.primary-action.danger.active.color": "of.button.danger.active.fg",
    "utrecht.button.primary-action.danger.focus.border-color": "of.button.danger.focus.color-border ",
    "utrecht.button.secondary-action.background-color": "of.color.bg",
    "utrecht.button.secondary-action.border-color": "of.color.border",
    "utrecht.button.secondary-action.color": "of.color.fg",
    "utrecht.button.secondary-action.hover.background-color": "of.button.hover.bg",
    "utrecht.button.secondary-action.hover.border-color": "of.button.hover.color-border",
    "utrecht.button.secondary-action.active.background-color": "of.button.active.bg",
    "utrecht.button.secondary-action.active.border-color": "of.button.active.color-border",
    "utrecht.button.secondary-action.active.color": "of.button.active.fg",
    "utrecht.button.secondary-action.focus.border-color": "of.color.focus-border",
    "utrecht.button.secondary-action.danger.background-color": "of.button.danger.bg",
    "utrecht.button.secondary-action.danger.border-color": "of.button.danger.color-border",
    "utrecht.button.secondary-action.danger.color": "of.button.danger.fg",
    "utrecht.button.secondary-action.danger.hover.background-color": "of.button.danger.hover.bg",
    "utrecht.button.secondary-action.danger.hover.border-color": "of.button.danger.hover.color-border",
    "utrecht.button.secondary-action.danger.active.background-color": "of.button.danger.active.bg ",
    "utrecht.button.secondary-action.danger.active.border-color": "of.button.danger.active.color-border ",
    "utrecht.button.secondary-action.danger.active.color": "of.button.danger.active.fg",
    "utrecht.button.secondary-action.danger.focus.border-color": "of.button.danger.focus.color-border ",
    "utrecht.button.subtle.danger.background-color": "of.button.danger.bg",
    "utrecht.button.subtle.danger.border-color": "of.button.danger.color-border",
    "utrecht.button.subtle.danger.color": "of.color.danger",
    "utrecht.button.subtle.danger.active.background-color": "of.color.danger",
    "utrecht.button.subtle.danger.active.color": "of.color.bg",
}


class TokenValue(TypedDict):
    value: str


TokenContainer: TypeAlias = dict[str, "TokenValue | TokenContainer"]


unset = object()


def apply_mapping(design_tokens: TokenContainer) -> TokenContainer:
    result = deepcopy(design_tokens)

    tokens_to_unset = set()

    for new, old in MAPPING.items():
        old_value = glom(design_tokens, old, default=unset)
        if old_value is unset:
            continue

        existing_value = glom(result, new, default=unset)
        if existing_value is not unset:
            tokens_to_unset.add(old)
            continue

        assign(result, new, old_value, missing=dict)
        tokens_to_unset.add(old)

    for token in tokens_to_unset:
        # don't delete utility tokens!
        if not token.startswith("of.button."):
            continue
        delete(result, token)

    return remove_empty_design_tokens(result)


def update_design_token_values(apps, _):
    GlobalConfiguration = apps.get_model("config", "GlobalConfiguration")
    config = GlobalConfiguration.objects.first()
    if config is None:
        return

    updated = apply_mapping(config.design_token_values)
    if updated != config.design_token_values:
        config.design_token_values = updated
        config.save(update_fields=["design_token_values"])


def remove_empty_design_tokens(obj: dict) -> dict:
    if "value" in obj:
        return obj

    result = {}
    for key, value in obj.items():
        if not isinstance(value, dict):
            continue
        updated_value = remove_empty_design_tokens(value)
        # empty object -> remove it by not including it anymore
        if not updated_value:
            continue

        result[key] = updated_value

    return result


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0058_auto_20231026_1525"),
    ]

    operations = [
        # reversing this is not possible - make sure you have backups!
        migrations.RunPython(update_design_token_values, migrations.RunPython.noop),
    ]
