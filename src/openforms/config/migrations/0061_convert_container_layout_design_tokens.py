# Generated by Django 3.2.21 on 2023-11-09 16:11

from copy import deepcopy
from typing import TypeAlias, TypedDict

from django.db import migrations

from glom import assign, delete, glom

# mapping from new, NL DS token to the source (old custom token)
MAPPING = {
    # footer
    "utrecht.page-footer.background-color": "of.page-footer.bg",
    "utrecht.page-footer.color": "of.page-footer.fg",
    # header
    "utrecht.page-header.background-color": "of.page-header.bg",
    "utrecht.page-header.color": "of.page-header.fg",
    # use logical properties instead of absolute positions
    "of.page-header.logo-return-url.min-block-size": "of.page-header.logo-return-url.min-height",
    "of.page-header.logo-return-url.min-inline-size": "of.page-header.logo-return-url.min-width",
    "of.page-header.logo-return-url.mobile.min-block-size": "of.page-header.logo-return-url.mobile.min-height",
    "of.page-header.logo-return-url.mobile.min-inline-size": "of.page-header.logo-return-url.mobile.min-width",
}

OBSOLETE_PREFIXES = (
    "of.page-footer.",
    "of.page-header.",
)


class TokenValue(TypedDict):
    value: str


TokenContainer: TypeAlias = dict[str, "TokenValue | TokenContainer"]


unset = object()


def apply_mapping(design_tokens: TokenContainer) -> TokenContainer:
    result = deepcopy(design_tokens)

    tokens_to_unset = set()

    for new, old in MAPPING.items():
        old_value = glom(design_tokens, old, default=unset)
        if old_value is unset:
            continue

        existing_value = glom(result, new, default=unset)
        if existing_value is not unset:
            tokens_to_unset.add(old)
            continue

        assign(result, new, old_value, missing=dict)
        tokens_to_unset.add(old)

    # TODO: re-enable this when #3593 is properly resolved.
    # for token in tokens_to_unset:
    #     # don't delete utility tokens!
    #     if not any(token.startswith(prefix) for prefix in OBSOLETE_PREFIXES):
    #         continue
    #     delete(result, token)

    return remove_empty_design_tokens(result)


def update_design_token_values(apps, _):
    GlobalConfiguration = apps.get_model("config", "GlobalConfiguration")
    config = GlobalConfiguration.objects.first()
    if config is None:
        return

    updated = apply_mapping(config.design_token_values)
    if updated != config.design_token_values:
        config.design_token_values = updated
        config.save(update_fields=["design_token_values"])


def remove_empty_design_tokens(obj: dict) -> dict:
    if "value" in obj:
        return obj

    result = {}
    for key, value in obj.items():
        if not isinstance(value, dict):
            continue
        updated_value = remove_empty_design_tokens(value)
        # empty object -> remove it by not including it anymore
        if not updated_value:
            continue

        result[key] = updated_value

    return result


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0060_create_csp_form_action_configs"),
    ]

    operations = [
        # reversing this is not possible - make sure you have backups!
        migrations.RunPython(update_design_token_values, migrations.RunPython.noop),
    ]
