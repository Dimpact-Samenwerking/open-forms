# Generated by Django 3.2.15 on 2022-08-11 09:29

from django.conf import settings
from django.db import migrations

from openforms.analytics_tools.constants import AnalyticsTools
from openforms.analytics_tools.utils import (
    get_cookies,
    get_csp,
    get_domain_hash,
    update_analytical_cookies,
    update_csp,
)


def move_analytics_config(apps, _):

    AnalyticsToolsConfiguration = apps.get_model(
        "analytics_tools", "AnalyticsToolsConfiguration"
    )
    GlobalConfiguration = apps.get_model("config", "GlobalConfiguration")

    analytics_config = AnalyticsToolsConfiguration.objects.first()
    config = GlobalConfiguration.objects.first()

    if not (analytics_config and config):
        return

    analytics_config.analytics_cookie_consent_group = (
        config.analytics_cookie_consent_group
    )

    # Google analytics
    analytics_config.gtm_code = config.gtm_code
    analytics_config.ga_code = config.ga_code
    if (
        analytics_config.gtm_code
        and analytics_config.ga_code
        and analytics_config.analytics_cookie_consent_group
    ):
        analytics_config.enable_google_analytics = True
        cookies = get_cookies(AnalyticsTools.google_analytics, [])
        csp = get_csp(AnalyticsTools.google_analytics, [])
        update_analytical_cookies(
            cookies, True, analytics_config.analytics_cookie_consent_group.id
        )
        update_csp(csp, True)

    # Matomo
    analytics_config.matomo_url = config.matomo_url
    analytics_config.matomo_site_id = config.matomo_site_id
    if (
        analytics_config.matomo_url
        and analytics_config.matomo_site_id
        and analytics_config.analytics_cookie_consent_group
    ):
        analytics_config.enable_matomo_site_analytics = True
        string_replacements_list = [
            ("SITE_ID", analytics_config.matomo_site_id),
            ("SITE_URL", analytics_config.matomo_url),
            (
                "DOMAIN_HASH",
                lambda cookie: get_domain_hash(
                    settings.ALLOWED_HOSTS[0], cookie_path=cookie["path"]
                ),
            ),
        ]
        cookies = get_cookies(AnalyticsTools.matomo, string_replacements_list)
        csp = get_csp(AnalyticsTools.matomo, string_replacements_list)
        update_analytical_cookies(
            cookies, True, analytics_config.analytics_cookie_consent_group.id
        )
        update_csp(csp, True)

    # Piwik
    analytics_config.piwik_url = config.piwik_url
    analytics_config.piwik_site_id = config.piwik_site_id
    if (
        analytics_config.piwik_url
        and analytics_config.piwik_site_id
        and analytics_config.analytics_cookie_consent_group
    ):
        analytics_config.enable_piwik_site_analytics = True
        string_replacements_list = [
            ("SITE_ID", analytics_config.piwik_site_id),
            ("SITE_URL", analytics_config.piwik_url),
            (
                "DOMAIN_HASH",
                lambda cookie: get_domain_hash(
                    settings.ALLOWED_HOSTS[0], cookie_path=cookie["path"]
                ),
            ),
        ]
        cookies = get_cookies(AnalyticsTools.piwik, string_replacements_list)
        csp = get_csp(AnalyticsTools.piwik, string_replacements_list)
        update_analytical_cookies(
            cookies, True, analytics_config.analytics_cookie_consent_group.id
        )
        update_csp(csp, True)

    # Piwik Pro
    analytics_config.piwik_pro_url = config.piwik_pro_url
    analytics_config.piwik_pro_site_id = config.piwik_pro_site_id
    if (
        analytics_config.piwik_pro_url
        and analytics_config.piwik_pro_site_id
        and analytics_config.analytics_cookie_consent_group
    ):
        analytics_config.enable_piwik_pro_site_analytics = True
        string_replacements_list = [
            ("SITE_ID", analytics_config.piwik_pro_site_id),
            ("SITE_URL", analytics_config.piwik_pro_url),
            (
                "DOMAIN_HASH",
                lambda cookie: get_domain_hash(
                    settings.ALLOWED_HOSTS[0], cookie_path=cookie["path"]
                ),
            ),
        ]
        cookies = get_cookies(AnalyticsTools.piwik_pro, string_replacements_list)
        csp = get_csp(AnalyticsTools.piwik_pro, string_replacements_list)
        update_analytical_cookies(
            cookies, True, analytics_config.analytics_cookie_consent_group.id
        )
        update_csp(csp, True)

    # SiteImprove
    analytics_config.siteimprove_id = config.siteimprove_id
    if (
        analytics_config.siteimprove_id
        and analytics_config.analytics_cookie_consent_group
    ):
        analytics_config.enable_siteimprove_analytics = True
        cookies = get_cookies(AnalyticsTools.siteimprove, [])
        csp = get_csp(AnalyticsTools.siteimprove, [])
        update_analytical_cookies(
            cookies, True, analytics_config.analytics_cookie_consent_group.id
        )
        update_csp(csp, True)

    analytics_config.save()


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0030_piwik_pro_support"),
        ("analytics_tools", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(move_analytics_config, migrations.RunPython.noop)
    ]
