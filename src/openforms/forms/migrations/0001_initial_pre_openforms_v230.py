# Generated by Django 3.2.20 on 2023-09-08 10:59

import re
import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import autoslug.fields
import privates.fields
import privates.storages
import tinymce.models

import csp_post_processor.fields
import openforms.authentication.fields
import openforms.forms.models.form_variable
import openforms.forms.models.form_version
import openforms.forms.validators
import openforms.payments.fields
import openforms.registrations.fields
import openforms.template.validators
import openforms.utils.files


class Migration(migrations.Migration):

    # TODO: in Open Forms 2.5.0 or 3.0, whichever comes first, remove the original
    # migrations and convert this to a normal migration.
    replaces = [
        ("forms", "0001_initial_squashed_0037_merge_20210903_1213"),
        ("forms", "0002_auto_20210917_1114_squashed_0045_remove_formstep_optional"),
    ]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("products", "0001_initial"),
    ]

    operations = [  # type: ignore
        migrations.CreateModel(
            name="FormDefinition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="name")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        populate_from="name",
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        help_text="The form definition as Form.io JSON schema",
                        validators=[
                            openforms.forms.validators.validate_template_expressions
                        ],
                        verbose_name="Form.io configuration",
                    ),
                ),
                (
                    "login_required",
                    models.BooleanField(
                        default=False,
                        help_text="DigID Login required for form step",
                        verbose_name="login required",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "is_reusable",
                    models.BooleanField(
                        default=False,
                        help_text="Allow this definition to be re-used in multiple forms",
                        verbose_name="is reusable",
                    ),
                ),
                (
                    "internal_name",
                    models.CharField(
                        blank=True,
                        help_text="internal name for management purposes",
                        max_length=50,
                        verbose_name="internal name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Form definition",
                "verbose_name_plural": "Form definitions",
            },
        ),
        migrations.CreateModel(
            name="Form",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        populate_from="name",
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                ("active", models.BooleanField(default=False, verbose_name="active")),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="products.product",
                    ),
                ),
                (
                    "registration_backend",
                    openforms.registrations.fields.RegistrationBackendChoiceField(
                        blank=True, max_length=100, verbose_name="registration backend"
                    ),
                ),
                (
                    "registration_backend_options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        null=True,
                        verbose_name="registration backend options",
                    ),
                ),
                ("_is_deleted", models.BooleanField(default=False)),
                (
                    "maintenance_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Users will not be able to start the form if it is in maintenance mode.",
                        verbose_name="maintenance mode",
                    ),
                ),
                (
                    "authentication_backends",
                    openforms.authentication.fields.AuthenticationBackendMultiSelectField(
                        base_field=openforms.authentication.fields.BackendChoiceField(
                            max_length=100
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "submission_confirmation_template",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data. If not specified, the global template will be used.",
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "show_progress_indicator",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the step progression should be displayed in the UI or not.",
                        verbose_name="show progress indicator",
                    ),
                ),
                (
                    "begin_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "change_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to change a certain step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="change text",
                    ),
                ),
                (
                    "confirm_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "previous_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="previous text",
                    ),
                ),
                (
                    "payment_backend",
                    openforms.payments.fields.PaymentBackendChoiceField(
                        blank=True, max_length=100, verbose_name="payment backend"
                    ),
                ),
                (
                    "payment_backend_options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        null=True,
                        verbose_name="payment backend options",
                    ),
                ),
                (
                    "all_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days when all submissions of this form will be permanently deleted. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="all submissions removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days errored submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How errored submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days incomplete submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="incomplete submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How incomplete submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="incomplete submissions removal method",
                    ),
                ),
                (
                    "successful_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days successful submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="successful submission removal limit",
                    ),
                ),
                (
                    "successful_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How successful submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="successful submissions removal method",
                    ),
                ),
                (
                    "internal_name",
                    models.CharField(
                        blank=True,
                        help_text="internal name for management purposes",
                        max_length=150,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "confirmation_email_option",
                    models.CharField(
                        choices=[
                            ("form_specific_email", "Form specific email"),
                            ("global_email", "Global email"),
                            ("no_email", "No email"),
                        ],
                        default="global_email",
                        max_length=20,
                        verbose_name="confirmation email option",
                    ),
                ),
                (
                    "explanation_template",
                    csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                        base_field=tinymce.models.HTMLField(
                            blank=True,
                            help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                            verbose_name="explanation template",
                        ),
                        blank=True,
                        help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                        verbose_name="explanation template",
                    ),
                ),
                (
                    "submission_allowed",
                    models.CharField(
                        choices=[
                            ("yes", "Yes"),
                            ("no_with_overview", "No (with overview page)"),
                            ("no_without_overview", "No (without overview page)"),
                        ],
                        default="yes",
                        help_text="Whether the user is allowed to submit this form or not, and whether the overview page should be shown if they are not.",
                        max_length=100,
                        verbose_name="submission allowed",
                    ),
                ),
                (
                    "display_main_website_link",
                    models.BooleanField(
                        default=True,
                        help_text="Display the link to the main website on the submission confirmation page.",
                        verbose_name="display main website link",
                    ),
                ),
                (
                    "auto_login_authentication_backend",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="automatic login"
                    ),
                ),
            ],
            options={
                "verbose_name": "form",
                "verbose_name_plural": "forms",
            },
        ),
        migrations.CreateModel(
            name="FormStep",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="forms.form"
                    ),
                ),
                (
                    "form_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="forms.formdefinition",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "optional",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this step is an optional step in the form. Currently used for form-rendering purposes, this is not (yet) used for validation purposes.",
                        verbose_name="optional",
                    ),
                ),
                (
                    "next_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the next step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "previous_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step previous text",
                    ),
                ),
                (
                    "save_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to save the current information. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step save text",
                    ),
                ),
            ],
            options={
                "verbose_name": "form step",
                "verbose_name_plural": "form steps",
                "ordering": ("order",),
            },
        ),
        migrations.CreateModel(
            name="FormLogic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "json_logic_trigger",
                    models.JSONField(
                        help_text="JSON logic associated with a step in a form.",
                        verbose_name="JSON logic",
                    ),
                ),
                (
                    "actions",
                    models.JSONField(
                        help_text="Which action(s) to perform if the JSON logic evaluates to true.",
                        verbose_name="actions",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which the JSON logic applies.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                    ),
                ),
                (
                    "is_advanced",
                    models.BooleanField(
                        default=False,
                        help_text="Is this an advanced rule (the admin user manually wrote the trigger as JSON)?",
                        verbose_name="is advanced",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FormPriceLogic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "json_logic_trigger",
                    models.JSONField(
                        help_text='JSON logic expression that must evaluate to "true" for the price to apply.',
                        verbose_name="JSON logic",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="price"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which the pricing JSON logic applies.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                    ),
                ),
            ],
            options={
                "verbose_name": "form price rule",
                "verbose_name_plural": "form price rules",
            },
        ),
        migrations.CreateModel(
            name="FormVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time of creation of the form version.",
                        verbose_name="created",
                    ),
                ),
                (
                    "export_blob",
                    models.JSONField(
                        help_text="The form, form definitions and form steps that make up this version, saved as JSON data."
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                        verbose_name="form",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description/context about this particular version.",
                        verbose_name="version description",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who authored this version.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "form version",
                "verbose_name_plural": "form versions",
            },
        ),
        migrations.CreateModel(
            name="FormsExport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "export_content",
                    privates.fields.PrivateMediaFileField(
                        help_text="Zip file containing all the exported forms.",
                        storage=privates.storages.PrivateMediaFileSystemStorage(),
                        upload_to="exports/%Y/%m/%d",
                        verbose_name="export content",
                    ),
                ),
                (
                    "datetime_requested",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time on which the bulk export was requested.",
                        verbose_name="date time requested",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that requested the download.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "forms export",
                "verbose_name_plural": "forms exports",
            },
            bases=(openforms.utils.files.DeleteFileFieldFilesMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FormVariable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="Name of the variable", verbose_name="name"
                    ),
                ),
                (
                    "key",
                    models.TextField(
                        help_text="Key of the variable, should be unique with the form.",
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid variable key. It must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.",
                                regex=re.compile("^\\w[\\w.\\-]*\\w$"),
                            )
                        ],
                        verbose_name="key",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("component", "Component"),
                            ("user_defined", "User defined"),
                        ],
                        help_text="Where will the data that will be associated with this variable come from",
                        max_length=50,
                        verbose_name="source",
                    ),
                ),
                (
                    "prefill_plugin",
                    models.CharField(
                        blank=True,
                        help_text="Which, if any, prefill plugin should be used",
                        max_length=50,
                        verbose_name="prefill plugin",
                    ),
                ),
                (
                    "prefill_attribute",
                    models.CharField(
                        blank=True,
                        help_text="Which attribute from the prefill response should be used to fill this variable",
                        max_length=50,
                        verbose_name="prefill attribute",
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("boolean", "Boolean"),
                            ("object", "Object"),
                            ("array", "Array"),
                            ("int", "Integer"),
                            ("float", "Float"),
                            ("datetime", "Datetime"),
                            ("time", "Time"),
                        ],
                        help_text="The type of the value that will be associated with this variable",
                        max_length=50,
                        verbose_name="data type",
                    ),
                ),
                (
                    "data_format",
                    models.CharField(
                        blank=True,
                        help_text="The format of the value that will be associated with this variable",
                        max_length=250,
                        verbose_name="data format",
                    ),
                ),
                (
                    "is_sensitive_data",
                    models.BooleanField(
                        default=False,
                        help_text="Will this variable be associated with sensitive data?",
                        verbose_name="is sensitive data",
                    ),
                ),
                (
                    "initial_value",
                    models.JSONField(
                        blank=True,
                        help_text="The initial value for this field",
                        null=True,
                        verbose_name="initial value",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which this variable is related",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                        verbose_name="form",
                    ),
                ),
                (
                    "form_definition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Form definition to which this variable is related. This is kept as metadata",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.formdefinition",
                        verbose_name="form definition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Form variable",
                "verbose_name_plural": "Form variables",
                "unique_together": {("form", "key")},
            },
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("prefill_plugin", ""), ("prefill_attribute", "")),
                        models.Q(
                            models.Q(("prefill_plugin", ""), _negated=True),
                            models.Q(("prefill_attribute", ""), _negated=True),
                        ),
                        _connector="OR",
                    )
                ),
                name="prefill_config_empty_or_complete",
            ),
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human readable name",
                        max_length=64,
                        verbose_name="name",
                    ),
                ),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
            },
        ),
        migrations.AddField(
            model_name="form",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="forms.category",
            ),
        ),
        migrations.AlterModelOptions(
            name="formlogic",
            options={"ordering": ("order",)},
        ),
        migrations.AddField(
            model_name="formlogic",
            name="order",
            field=models.PositiveIntegerField(
                db_index=True, default=0, editable=False, verbose_name="order"
            ),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name="formlogic",
            options={
                "ordering": ("order",),
                "verbose_name": "form logic",
                "verbose_name_plural": "form logic rules",
            },
        ),
        migrations.AlterModelManagers(
            name="formvariable",
            managers=[
                ("objects", openforms.forms.models.form_variable.FormVariableManager()),
            ],
        ),
        migrations.AddField(
            model_name="formlogic",
            name="trigger_from_step",
            field=models.ForeignKey(
                blank=True,
                help_text="When set, the trigger will only be checked once the specified step is reached. This means the rule will never trigger for steps before the specified trigger step. If unset, the trigger will always be checked.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="forms.formstep",
                verbose_name="trigger from step",
            ),
        ),
        migrations.AddField(
            model_name="formversion",
            name="app_git_sha",
            field=models.CharField(
                blank=True,
                default=openforms.forms.models.form_version.get_app_git_sha,
                editable=False,
                help_text="Application commit hash at the time this version was created.",
                max_length=50,
                verbose_name="application commit hash",
            ),
        ),
        migrations.AddField(
            model_name="formversion",
            name="app_release",
            field=models.CharField(
                blank=True,
                default=openforms.forms.models.form_version.get_app_release,
                editable=False,
                help_text="App release/version at the time this version was created.",
                max_length=50,
                verbose_name="application version",
            ),
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(
                            ("form_definition__isnull", True),
                            models.Q(("source", "component"), _negated=True),
                        ),
                        ("form_definition__isnull", False),
                        _connector="OR",
                    )
                ),
                name="form_definition_not_null_for_component_vars",
            ),
        ),
        migrations.AddField(
            model_name="formdefinition",
            name="_num_components",
            field=models.PositiveIntegerField(
                default=0,
                help_text="The total number of Formio components used in the configuration",
                verbose_name="number of Formio components",
            ),
        ),
        migrations.RemoveField(
            model_name="formstep",
            name="optional",
        ),
    ]
