# Generated by Django 2.2.24 on 2021-09-03 11:10

import uuid

import django.contrib.postgres.fields.jsonb
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import autoslug.fields
import tinymce.models

import openforms.authentication.fields
import openforms.payments.fields
import openforms.registrations.fields
import openforms.utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("products", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="FormDefinition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="name")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        populate_from="name",
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "configuration",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="The form definition as Form.io JSON schema",
                        verbose_name="Form.io configuration",
                    ),
                ),
                (
                    "login_required",
                    models.BooleanField(
                        default=False,
                        help_text="DigID Login required for form step",
                        verbose_name="login required",
                    ),
                ),
                (
                    "uuid",
                    openforms.utils.fields.StringUUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "is_reusable",
                    models.BooleanField(
                        default=False,
                        help_text="Allow this definition to be re-used in multiple forms",
                        verbose_name="is reusable",
                    ),
                ),
            ],
            options={
                "verbose_name": "Form definition",
                "verbose_name_plural": "Form definitions",
            },
        ),
        migrations.CreateModel(
            name="Form",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="name")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=True,
                        max_length=100,
                        populate_from="name",
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                ("active", models.BooleanField(default=False, verbose_name="active")),
                (
                    "uuid",
                    openforms.utils.fields.StringUUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="products.Product",
                    ),
                ),
                (
                    "registration_backend",
                    openforms.registrations.fields.RegistrationBackendChoiceField(
                        blank=True, max_length=100, verbose_name="registration backend"
                    ),
                ),
                (
                    "registration_backend_options",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        default=dict,
                        null=True,
                        verbose_name="registration backend options",
                    ),
                ),
                ("_is_deleted", models.BooleanField(default=False)),
                (
                    "maintenance_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Users will not be able to start the form if it is in maintenance mode.",
                        verbose_name="maintenance mode",
                    ),
                ),
                (
                    "authentication_backends",
                    openforms.authentication.fields.AuthenticationBackendMultiSelectField(
                        base_field=openforms.authentication.fields.BackendChoiceField(
                            max_length=100
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "submission_confirmation_template",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data. If not specified, the global template will be used.",
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "show_progress_indicator",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the step progression should be displayed in the UI or not.",
                        verbose_name="show progress indicator",
                    ),
                ),
                (
                    "begin_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "change_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to change a certain step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="change text",
                    ),
                ),
                (
                    "confirm_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "previous_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the overview page to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="previous text",
                    ),
                ),
                (
                    "can_submit",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the user is allowed to submit this form or not.",
                        verbose_name="can submit",
                    ),
                ),
                (
                    "payment_backend",
                    openforms.payments.fields.PaymentBackendChoiceField(
                        blank=True, max_length=100, verbose_name="payment backend"
                    ),
                ),
                (
                    "payment_backend_options",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        default=dict,
                        null=True,
                        verbose_name="payment backend options",
                    ),
                ),
                (
                    "all_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days when all submissions of this form will be permanently deleted. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="all submissions removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days errored submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How errored submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days incomplete submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="incomplete submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How incomplete submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="incomplete submissions removal method",
                    ),
                ),
                (
                    "successful_submissions_removal_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Amount of days successful submissions of this form will remain before being removed. Leave blank to use value in General Configuration.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="successful submission removal limit",
                    ),
                ),
                (
                    "successful_submissions_removal_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        help_text="How successful submissions of this form will be removed after the limit. Leave blank to use value in General Configuration.",
                        max_length=50,
                        verbose_name="successful submissions removal method",
                    ),
                ),
            ],
            options={
                "verbose_name": "form",
                "verbose_name_plural": "forms",
            },
        ),
        migrations.CreateModel(
            name="FormStep",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="forms.Form"
                    ),
                ),
                (
                    "form_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="forms.FormDefinition",
                    ),
                ),
                (
                    "uuid",
                    openforms.utils.fields.StringUUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "optional",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this step is an optional step in the form. Currently used for form-rendering purposes, this is not (yet) used for validation purposes.",
                        verbose_name="optional",
                    ),
                ),
                (
                    "next_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the next step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "previous_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to go to the previous step. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step previous text",
                    ),
                ),
                (
                    "save_text",
                    models.CharField(
                        blank=True,
                        help_text="The text that will be displayed in the form step to save the current information. Leave blank to get value from global configuration.",
                        max_length=50,
                        verbose_name="step save text",
                    ),
                ),
            ],
            options={
                "verbose_name": "form step",
                "verbose_name_plural": "form steps",
            },
        ),
        migrations.CreateModel(
            name="FormVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    openforms.utils.fields.StringUUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time of creation of the form version.",
                        verbose_name="created",
                    ),
                ),
                (
                    "export_blob",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="The form, form definitions and form steps that make up this version, saved as JSON data."
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.Form",
                        verbose_name="form",
                    ),
                ),
            ],
            options={
                "verbose_name": "form version",
                "verbose_name_plural": "form versions",
            },
        ),
        migrations.CreateModel(
            name="FormLogic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "json_logic_trigger",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="JSON logic associated with a step in a form.",
                        verbose_name="JSON logic",
                    ),
                ),
                (
                    "actions",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text="Which action(s) to perform if the JSON logic evaluates to true.",
                        verbose_name="actions",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which the JSON logic applies.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.Form",
                    ),
                ),
            ],
        ),
    ]
