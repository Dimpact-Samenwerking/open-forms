# Generated by Django 3.2.16 on 2022-11-01 10:08

import uuid
from pathlib import Path

from django.conf import settings
from django.core.files import File
from django.db import migrations

from simple_certmanager.constants import CertificateTypes


def eherkenning_to_db_config(apps, _):
    Certificate = apps.get_model("simple_certmanager", "Certificate")
    EherkenningConfiguration = apps.get_model(
        "digid_eherkenning", "EherkenningConfiguration"
    )

    setting = settings.EHERKENNING
    # if there's no certificate configured, we can assume DigiD is not used.
    if not setting["cert_file"]:
        return

    with Path(setting["key_file"]).open("rb") as key_file, Path(
        setting["cert_file"]
    ).open("rb") as cert_file:
        # ensure a certificate exists
        certificate = Certificate.objects.create(
            label=f"eHerkenning/eIDAS (from settings)",
            type=CertificateTypes.key_pair,
            public_certificate=File(cert_file, "eh.pem"),
            private_key=File(key_file, "eh_key.pem"),
        )

    # django-solo uses PK=1 by default, but the custom attribute is not exposed in
    # django migrations, so we use a hardcoded value.
    config, _ = EherkenningConfiguration.objects.get_or_create(pk=1)
    config.certificate = certificate
    config.base_url = setting["base_url"]
    config.entity_id = setting["entity_id"]
    config.idp_service_entity_id = setting["service_entity_id"]
    config.want_assertions_signed = setting["want_assertions_signed"]
    config.want_assertions_encrypted = setting["want_assertions_encrypted"]
    config.signature_algorithm = setting["signature_algorithm"]
    config.oin = setting["oin"]
    config.artifact_resolve_content_type = setting["artifact_resolve_content_type"]
    config.service_language = "nl"  # hardcoded in settings
    config.loa = settings.EHERKENNING_LOA

    if len(setting["services"]) == 1:
        eherkenning, eidas = setting["services"][0], None
    else:
        eherkenning, eidas = setting["services"]

    # eherkenning service
    config.eh_attribute_consuming_service_index = eherkenning[
        "attribute_consuming_service_index"
    ]
    config.eh_service_uuid = eherkenning["service_uuid"] or uuid.uuid4()
    config.eh_service_instance_uuid = (
        eherkenning["service_instance_uuid"] or uuid.uuid4()
    )
    config.eh_requested_attributes = eherkenning["requested_attributes"]

    # eidas service
    if eidas is not None:
        config.eidas_attribute_consuming_service_index = eidas[
            "attribute_consuming_service_index"
        ]
        config.eidas_service_uuid = eidas["service_uuid"] or uuid.uuid4()
        config.eidas_service_instance_uuid = (
            eidas["service_instance_uuid"] or uuid.uuid4()
        )
        config.eidas_requested_attributes = eidas["requested_attributes"]
    else:
        config.no_eidas = True

    config.save()

    if idp_md_file := setting["metadata_file"]:
        idp_md_file = Path(idp_md_file)
        with idp_md_file.open("rb") as md_file:
            config.idp_metadata_file = File(md_file, idp_md_file.name)
            config.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("digid_eherkenning", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(eherkenning_to_db_config, migrations.RunPython.noop),
    ]
