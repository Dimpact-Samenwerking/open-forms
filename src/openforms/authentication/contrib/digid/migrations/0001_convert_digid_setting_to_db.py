# Generated by Django 3.2.16 on 2022-11-01 10:05

import uuid
from pathlib import Path

from django.conf import settings
from django.core.files import File
from django.db import migrations

from simple_certmanager.constants import CertificateTypes


def digid_to_db_config(apps, _):
    Certificate = apps.get_model("simple_certmanager", "Certificate")
    DigidConfiguration = apps.get_model("digid_eherkenning", "DigidConfiguration")

    setting = settings.DIGID
    # if there's no certificate configured, we can assume DigiD is not used.
    if not setting["cert_file"]:
        return

    with Path(setting["key_file"]).open("rb") as key_file, Path(
        setting["cert_file"]
    ).open("rb") as cert_file:
        # ensure a certificate exists
        certificate = Certificate.objects.create(
            label=f"DigiD (from settings)",
            type=CertificateTypes.key_pair,
            public_certificate=File(cert_file, "digid.pem"),
            private_key=File(key_file, "digid_key.pem"),
        )

    # django-solo uses PK=1 by default, but the custom attribute is not exposed in
    # django migrations, so we use a hardcoded value.
    config, _ = DigidConfiguration.objects.get_or_create(pk=1)
    # new feature that we didn't use before, enabling this breaks
    # metadata validation.
    config.slo = False
    config.certificate = certificate
    config.base_url = setting["base_url"]
    config.entity_id = setting["entity_id"]
    config.idp_service_entity_id = setting["service_entity_id"]
    config.attribute_consuming_service_index = setting[
        "attribute_consuming_service_index"
    ]
    config.requested_attributes = setting["requested_attributes"]
    config.want_assertions_signed = setting["want_assertions_signed"]

    if idp_md_file := setting["metadata_file"]:
        idp_md_file = Path(idp_md_file)
        with idp_md_file.open("rb") as md_file:
            config.idp_metadata_file = File(md_file, idp_md_file.name)

    config.save()


class Migration(migrations.Migration):

    dependencies = [
        ("digid_eherkenning", "0001_initial"),
    ]

    # TODO: once 2.1 is out and 2.2 development starts, we can remove the settings
    # and these operations (and make the migration noop).
    operations = [
        migrations.RunPython(digid_to_db_config, migrations.RunPython.noop),
    ]
